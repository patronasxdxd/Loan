/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Loan, LoanInterface } from "../Loan";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "borrower",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "loanDaiAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeDaiAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ethCollateralAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "repayByTimestamp",
            type: "uint256",
          },
        ],
        internalType: "struct loan.Terms",
        name: "_terms",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "_daiAdress",
        type: "address",
      },
    ],
    name: "create",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "daiAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fundLoan",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getState",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lender",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "liquidate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "repay",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "state",
    outputs: [
      {
        internalType: "enum loan.Loanstate",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "takeALoanAndAcceptLoanTerms",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "terms",
    outputs: [
      {
        internalType: "uint256",
        name: "loanDaiAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeDaiAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ethCollateralAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "repayByTimestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenaddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161099d38038061099d83398101604081905261002f9161005e565b600780546001600160a01b039092166001600160a01b031992831681179091556008805490921617905561008e565b60006020828403121561007057600080fd5b81516001600160a01b038116811461008757600080fd5b9392505050565b6109008061009d6000396000f3fe6080604052600436106100a75760003560e01c80637df1f1b9116100645780637df1f1b9146101635780638db5799414610183578063bcead63e14610198578063c19d93fb146101bd578063d5025625146101e4578063f09b1eb41461022757600080fd5b80631865c57d146100ac57806328a07025146100d75780632c387275146100ee5780633feff76d14610126578063402d8883146101465780634c4b28f61461015b575b600080fd5b3480156100b857600080fd5b506100c161029c565b6040516100ce9190610802565b60405180910390f35b3480156100e357600080fd5b506100ec610354565b005b3480156100fa57600080fd5b5060065461010e906001600160a01b031681565b6040516001600160a01b0390911681526020016100ce565b34801561013257600080fd5b5060085461010e906001600160a01b031681565b34801561015257600080fd5b506100ec61040d565b6100ec610555565b34801561016f57600080fd5b5060055461010e906001600160a01b031681565b34801561018f57600080fd5b506100ec61067f565b3480156101a457600080fd5b5060045461010e9061010090046001600160a01b031681565b3480156101c957600080fd5b506004546101d79060ff1681565b6040516100ce91906107da565b3480156101f057600080fd5b506000546001546002546003546102079392919084565b6040805194855260208501939093529183015260608201526080016100ce565b34801561023357600080fd5b506100ec610242366004610746565b815160005560208201516001556040820151600255606090910151600355600680546001600160a01b0319166001600160a01b0392909216919091179055600480546001600160a81b03191660ff19610100330216179055565b6060600060045460ff1660028111156102b7576102b76108b4565b14156102e6575060408051808201909152600e81526d1cdd185d194e8810dc99585d195960921b602082015290565b600160045460ff1660028111156102ff576102ff6108b4565b141561032d575060408051808201909152600d81526c1cdd185d194e88119d5b991959609a1b602082015290565b5060408051808201909152600c81526b39ba30ba329d103a30b5b2b760a11b602082015290565b60028060045460ff16600281111561036e5761036e6108b4565b146103945760405162461bcd60e51b815260040161038b90610857565b60405180910390fd5b60045461010090046001600160a01b031633146103b057600080fd5b6003544210156103fa5760405162461bcd60e51b8152602060048201526015602482015274031b0b73a103132b337b932903a3432903230ba329605d1b604482015260640161038b565b60045461010090046001600160a01b0316ff5b60028060045460ff166002811115610427576104276108b4565b146104445760405162461bcd60e51b815260040161038b90610857565b6005546001600160a01b0316331461048b5760405162461bcd60e51b815260206004820152600a60248201526937b7363c9037bbb732b960b11b604482015260640161038b565b6007546005546004546001546000546001600160a01b03948516946323b872dd94811693610100900416916104bf9161088e565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b15801561050e57600080fd5b505af1158015610522573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610546919061071d565b506005546001600160a01b0316ff5b60018060045460ff16600281111561056f5761056f6108b4565b1461058c5760405162461bcd60e51b815260040161038b90610857565b60025434146105ce5760405162461bcd60e51b815260206004820152600e60248201526d1a5b9d985b1a5908185b5bdd5b9d60921b604482015260640161038b565b60058054336001600160a01b031990911681179091556004805460ff1916600217815560075460005460405163a9059cbb60e01b81529283019390935260248201929092526001600160a01b039091169063a9059cbb906044015b602060405180830381600087803b15801561064357600080fd5b505af1158015610657573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067b919061071d565b5050565b60008060045460ff166002811115610699576106996108b4565b146106b65760405162461bcd60e51b815260040161038b90610857565b6004805460ff191660011781556007546000546040516323b872dd60e01b8152339381019390935230602484015260448301526001600160a01b0316906323b872dd90606401610629565b80356001600160a01b038116811461071857600080fd5b919050565b60006020828403121561072f57600080fd5b8151801515811461073f57600080fd5b9392505050565b60008082840360a081121561075a57600080fd5b608081121561076857600080fd5b506040516080810181811067ffffffffffffffff8211171561079a57634e487b7160e01b600052604160045260246000fd5b806040525083358152602084013560208201526040840135604082015260608401356060820152809250506107d160808401610701565b90509250929050565b60208101600383106107fc57634e487b7160e01b600052602160045260246000fd5b91905290565b600060208083528351808285015260005b8181101561082f57858101830151858201604001528201610813565b81811115610841576000604083870101525b50601f01601f1916929092016040019392505050565b60208082526019908201527f6e6f7420616c6c6f77656420696e207468697320737461746500000000000000604082015260600190565b600082198211156108af57634e487b7160e01b600052601160045260246000fd5b500190565b634e487b7160e01b600052602160045260246000fdfea26469706673582212202d861fd202bb832354d35af9881a10504545f258f609bab9c03fa6e0964f14b264736f6c63430008070033";

type LoanConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LoanConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Loan__factory extends ContractFactory {
  constructor(...args: LoanConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Loan> {
    return super.deploy(_token, overrides || {}) as Promise<Loan>;
  }
  getDeployTransaction(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, overrides || {});
  }
  attach(address: string): Loan {
    return super.attach(address) as Loan;
  }
  connect(signer: Signer): Loan__factory {
    return super.connect(signer) as Loan__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LoanInterface {
    return new utils.Interface(_abi) as LoanInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Loan {
    return new Contract(address, _abi, signerOrProvider) as Loan;
  }
}
